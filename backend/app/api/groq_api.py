import os
import json
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from groq import Groq

# Diret√≥rio para armazenar os relat√≥rios gerados
REPORTS_DIR = "app/reports"
PDF_DIR = "app/pdf_reports"
os.makedirs(REPORTS_DIR, exist_ok=True)
os.makedirs(PDF_DIR, exist_ok=True)

# Caminho do relat√≥rio gerado
FORMATTED_REPORT_PATH = os.path.join(REPORTS_DIR, "latest_formatted.json")

# Carregar chave da API Groq
api_key = os.getenv("GROQ_API_KEY")
if not api_key:
    raise ValueError("‚ùå GROQ_API_KEY n√£o est√° definido. Configure no .env ou nas vari√°veis de ambiente.")

# Criar cliente Groq
try:
    client = Groq(api_key=api_key)
    print("‚úÖ Cliente Groq inicializado com sucesso.")
except Exception as e:
    raise RuntimeError(f"‚ùå Erro ao inicializar o cliente Groq: {e}")

# Configura√ß√£o do roteador API
router = APIRouter(tags=["Groq AI"])

# Modelo para a solicita√ß√£o da API
class GroqRequest(BaseModel):
    text: str
    language: str = "pt"
    user_level: str = "m√©dio"
    author: str = "Desconhecido"

async def query_groq_api(request: GroqRequest):
    """
    Reformula um relat√≥rio t√©cnico, tornando-o mais leg√≠vel e formatado corretamente.
    - `text`: Conte√∫do do relat√≥rio t√©cnico.
    - `language`: Idioma do texto gerado.
    - `user_level`: N√≠vel do usu√°rio ("iniciante", "m√©dio", "avan√ßado").
    - `author`: Nome do autor do relat√≥rio.

    Retorna:
    - Texto reformulado em formato estruturado.
    """

    print(f"üì§ Enviando relat√≥rio para IA... (Primeiros 100 caracteres: {request.text[:100]}...)")

    try:
        # Defini√ß√£o do prompt estruturado
        prompt = f"""
        You are an expert in smart contract security. 
        Please respond concisely to the following question or text. 
        Focus on essential details. If the user requests more detail, you may elaborate.

        The user-level is {request.user_level}, in {request.language}.

        Report Author: {request.author}.
        Report Content:
        {request.text}

        üîç **Conte√∫do do relat√≥rio:**
        {request.text}
        """

        # Chamada para a API Groq
        chat_completion = client.chat.completions.create(
            messages=[{"role": "user", "content": prompt}],
            model="llama-3.3-70b-versatile",
        )

        # Verificar resposta
        if chat_completion.choices:
            formatted_response = chat_completion.choices[0].message.content
            print("‚úÖ Resumo gerado com sucesso.")

            # Salvar o relat√≥rio formatado como JSON
            save_formatted_report(formatted_response)

            return formatted_response

        print("‚ùå Nenhuma resposta √∫til foi retornada pela IA.")
        return "<p>A IA n√£o gerou um resumo v√°lido.</p>"

    except Exception as e:
        print(f"‚ùå Erro ao chamar a API Groq: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao consultar a IA: {str(e)}")


def save_formatted_report(formatted_text):
    """
    Salva o relat√≥rio formatado como um JSON no diret√≥rio apropriado.
    """
    try:
        report_data = {"formatted_report": formatted_text}

        with open(FORMATTED_REPORT_PATH, "w", encoding="utf-8") as f:
            json.dump(report_data, f, indent=4)

        print(f"üìÇ Relat√≥rio formatado salvo em: {FORMATTED_REPORT_PATH}")

    except Exception as e:
        print(f"‚ùå Erro ao salvar o relat√≥rio formatado: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao salvar o relat√≥rio: {str(e)}")


@router.post("/analyze/")
async def analyze_report(request: GroqRequest):
    """
    Rota que recebe um relat√≥rio t√©cnico e retorna uma vers√£o reformulada pela IA da Groq.
    Al√©m de gerar o relat√≥rio formatado, tamb√©m inicia a gera√ß√£o do PDF.
    """
    try:
        result = await query_groq_api(request)

        # Gera automaticamente o PDF ap√≥s salvar o relat√≥rio formatado
        generate_pdf_from_report()

        return {"summary": result}

    except HTTPException as e:
        raise e
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro inesperado: {str(e)}")


def generate_pdf_from_report():
    """
    Chama a API interna de gera√ß√£o de PDF para converter o relat√≥rio formatado.
    """
    from app.api.generatorpdf_api import generate_pdf

    try:
        generate_pdf(FORMATTED_REPORT_PATH)
        print("‚úÖ PDF gerado com sucesso ap√≥s atualiza√ß√£o do relat√≥rio.")
    except Exception as e:
        print(f"‚ùå Erro ao gerar PDF ap√≥s atualiza√ß√£o do relat√≥rio: {e}")
